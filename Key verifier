local salt = "monkey"  -- Must match the Python generator
local key = input.Text -- From GUI

-- Base64 decoder
local function b64decode(data)
    local b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    local lookup = {}
    for i = 1, #b64chars do lookup[b64chars:sub(i, i)] = i - 1 end
    data = data:gsub("=", "")
    local bytes = {}

    for i = 1, #data, 4 do
        local c1 = lookup[data:sub(i, i)] or 0
        local c2 = lookup[data:sub(i + 1, i + 1)] or 0
        local c3 = lookup[data:sub(i + 2, i + 2)] or 0
        local c4 = lookup[data:sub(i + 3, i + 3)] or 0

        local b1 = c1 * 4 + math.floor(c2 / 16)
        local b2 = (c2 % 16) * 16 + math.floor(c3 / 4)
        local b3 = (c3 % 4) * 64 + c4

        table.insert(bytes, string.char(b1))
        if data:sub(i + 2, i + 2) ~= "" then table.insert(bytes, string.char(b2)) end
        if data:sub(i + 3, i + 3) ~= "" then table.insert(bytes, string.char(b3)) end
    end

    return table.concat(bytes)
end

-- SHA-256 (requires Roblox-compatible implementation or plugin)
local function sha256(data)
    -- Replace this with your SHA-256 module
    return require(script.SHA256)(data)
end

-- Key validation
local function validateAvalancheKey(encodedKey)
    local decodedHash = b64decode(encodedKey)
    local now = os.time()

    for offset = -5, 5 do
        local expiry = now + offset
        for nonce = 0, 999999 do
            local nonceStr = string.format("%06d", nonce)
            local raw = expiry .. "|" .. salt .. "|" .. nonceStr
            local hash = sha256(raw)

            if hash == decodedHash then
                output.Text = string.format(
                    "‚úÖ Valid key\nüïí Expiry: %s\n‚è≥ Remaining: %d seconds\nüîÅ Nonce: %s",
                    os.date("%Y-%m-%d %H:%M:%S", expiry),
                    expiry - now,
                    nonceStr
                )
                return
            end
        end
    end

    output.Text = "‚ùå Invalid or expired key"
end
