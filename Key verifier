-- CONFIG
local salt = "monkey"

-- GUI references
local inputBox = script.Parent.Parent:FindFirstChild("InputBox")
local outputLabel = script.Parent.Parent:FindFirstChild("OutputLabel")

-- Sanity check
if not inputBox or not outputLabel then
    warn("‚ùå GUI elements not found")
    return
end

-- Base64 decoder with padding handling
local function b64decode(data)
    local b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    local lookup = {}
    for i = 1, #b64chars do
        lookup[b64chars:sub(i, i)] = i - 1
    end

    data = data:gsub("[^" .. b64chars .. "=]", "") -- strip invalid chars
    local bytes = {}

    for i = 1, #data, 4 do
        local c1 = lookup[data:sub(i, i)] or 0
        local c2 = lookup[data:sub(i + 1, i + 1)] or 0
        local c3 = lookup[data:sub(i + 2, i + 2)] or 0
        local c4 = lookup[data:sub(i + 3, i + 3)] or 0

        local b1 = c1 * 4 + math.floor(c2 / 16)
        local b2 = (c2 % 16) * 16 + math.floor(c3 / 4)
        local b3 = (c3 % 4) * 64 + c4

        table.insert(bytes, string.char(b1))
        if data:sub(i + 2, i + 2) ~= "" then table.insert(bytes, string.char(b2)) end
        if data:sub(i + 3, i + 3) ~= "" then table.insert(bytes, string.char(b3)) end
    end

    return table.concat(bytes)
end

-- Hexify raw string
local function toHex(str)
    return (str:gsub(".", function(c)
        return string.format("%02x", string.byte(c))
    end))
end

-- Load HMAC module
local sha256_hmac
local success, result = pcall(function()
    return require(script.Parent:FindFirstChild("SHA256_HMAC"))
end)
if success then
    sha256_hmac = result
else
    warn("‚ùå Failed to load SHA256_HMAC module")
    return
end

-- Validate key
local function validateKey(encodedKey)
    encodedKey = encodedKey:gsub("[%z\1-\31]", ""):gsub("%s+$", "") -- sanitize

    local decoded = b64decode(encodedKey)
    if not decoded:find("|") then
        outputLabel.Text = "‚ùå Decoding failed or corrupted input"
        return
    end

    local parts = string.split(decoded, "|")
    if #parts ~= 3 then
        outputLabel.Text = "‚ùå Invalid key format"
        return
    end

    local expiry = tonumber(parts[1])
    local nonce = parts[2]
    local hash = parts[3]

    if not expiry or not nonce or not hash then
        outputLabel.Text = "‚ùå Malformed key"
        return
    end

    if expiry < os.time() then
        outputLabel.Text = "‚ùå Key expired"
        return
    end

    if expiry > os.time() + 3600 then
        outputLabel.Text = "‚ùå Expiry exceeds allowed range"
        return
    end

    local raw = expiry .. "|" .. nonce
    local expected = sha256_hmac(raw, salt)
    local expectedHex = toHex(expected)

    print("üîç Decoded:", decoded)
    print("üîç Expiry:", expiry)
    print("üîç Nonce:", nonce)
    print("üîç Hash:", hash)
    print("üîç Expected:", expectedHex)

    if expectedHex == hash then
        outputLabel.Text = string.format(
            "‚úÖ Valid key\nüïí Expiry: %s\n‚è≥ Remaining: %d seconds\nüîÅ Nonce: %s",
            os.date("%Y-%m-%d %H:%M:%S", expiry),
            expiry - os.time(),
            nonce
        )
    else
        outputLabel.Text = "‚ùå Tampered or invalid key"
    end
end

-- Button click
script.Parent.MouseButton1Click:Connect(function()
    print("üöÄ Button clicked")
    validateKey(inputBox.Text)
end)

print("‚úÖ Script loaded")
