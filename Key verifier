-- üîê CONFIG
local SALT = "monkey"

-- üîì Base64 decoder (safe, compact)
local function b64decode(data)
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    local lookup = {}
    for i = 1, #chars do lookup[chars:sub(i, i)] = i - 1 end
    data = data:gsub("=", "")
    local bytes = {}

    for i = 1, #data, 4 do
        local c1 = lookup[data:sub(i, i)] or 0
        local c2 = lookup[data:sub(i + 1, i + 1)] or 0
        local c3 = lookup[data:sub(i + 2, i + 2)] or 0
        local c4 = lookup[data:sub(i + 3, i + 3)] or 0

        local b1 = c1 * 4 + math.floor(c2 / 16)
        local b2 = (c2 % 16) * 16 + math.floor(c3 / 4)
        local b3 = (c3 % 4) * 64 + c4

        table.insert(bytes, string.char(b1))
        if data:sub(i + 2, i + 2) ~= "" then table.insert(bytes, string.char(b2)) end
        if data:sub(i + 3, i + 3) ~= "" then table.insert(bytes, string.char(b3)) end
    end

    return table.concat(bytes)
end

-- üß™ Key validation logic
local function validateKey(key, outputLabel)
    local decoded = b64decode(key)
    if not decoded or #decoded < #SALT then
        outputLabel.Text = "‚ùå Invalid key format"
        return
    end

    local extractedSalt = decoded:sub(-#SALT)
    local payload = decoded:sub(1, #decoded - #SALT)

    if extractedSalt ~= SALT then
        outputLabel.Text = "‚ùå Salt mismatch"
        return
    end

    local expiry = tonumber(payload:match("(%d+)"))
    if not expiry then
        outputLabel.Text = "‚ùå Expiry timestamp missing"
        return
    end

    local now = os.time()
    local remaining = expiry - now
    local changingNumber = math.floor(now / 60)

    outputLabel.Text = string.format(
        "‚úÖ Salt: %s\nüïí Expiry: %s\n‚è≥ Remaining: %d seconds\nüîÅ Changing #: %d",
        extractedSalt,
        os.date("%Y-%m-%d %H:%M:%S", expiry),
        remaining,
        changingNumber
    )
end

-- üñºÔ∏è GUI Setup
local gui = Instance.new("ScreenGui")
local frame = Instance.new("Frame")
local input = Instance.new("TextBox")
local button = Instance.new("TextButton")
local output = Instance.new("TextLabel")
local close = Instance.new("TextButton")

frame.Size = UDim2.new(0, 320, 0, 260)
frame.Position = UDim2.new(0.5, -160, 0.5, -130)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.fromRGB(60, 60, 60)
frame.Draggable = true
frame.Parent = gui

input.Size = UDim2.new(1, -20, 0, 30)
input.Position = UDim2.new(0, 10, 0, 10)
input.PlaceholderText = "üîë Enter your key"
input.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
input.TextColor3 = Color3.new(1, 1, 1)
input.BorderSizePixel = 1
input.Parent = frame

button.Size = UDim2.new(1, -20, 0, 30)
button.Position = UDim2.new(0, 10, 0, 50)
button.Text = "‚úÖ Validate"
button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
button.TextColor3 = Color3.new(1, 1, 1)
button.BorderSizePixel = 1
button.Parent = frame

output.Size = UDim2.new(1, -20, 0, 120)
output.Position = UDim2.new(0, 10, 0, 90)
output.Text = ""
output.BackgroundTransparency = 1
output.TextColor3 = Color3.new(1, 1, 1)
output.TextWrapped = true
output.TextYAlignment = Enum.TextYAlignment.Top
output.FontSize = Enum.FontSize.Size14
output.Parent = frame

close.Size = UDim2.new(0, 30, 0, 30)
close.Position = UDim2.new(1, -35, 0, 5)
close.Text = "‚úñ"
close.BackgroundColor3 = Color3.fromRGB(120, 0, 0)
close.TextColor3 = Color3.new(1, 1, 1)
close.BorderSizePixel = 1
close.Parent = frame

gui.Parent = game:GetService("CoreGui")

-- üéØ Events
button.MouseButton1Click:Connect(function()
    local success, err = pcall(function()
        validateKey(input.Text, output)
    end)
    if not success then
        output.Text = "üí• Internal error:\n" .. tostring(err)
        warn("Validation crash:", err)
    end
end)

close.MouseButton1Click:Connect(function()
    gui:Destroy()
end)
