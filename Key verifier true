-- 🔐 Persistent Key Tracking
local keyFile = "used_keys.txt"

local function loadUsedKeys()
    local keys = {}
    if isfile(keyFile) then
        local content = readfile(keyFile)
        for line in string.gmatch(content, "[^\r\n]+") do
            keys[line] = true
        end
    end
    return keys
end

local function isUsed(raw)
    return loadUsedKeys()[raw] == true
end

local function saveUsedKey(key)
    if not isUsed(key) then
        appendfile(keyFile, key .. "\n")
    end
end

local function markUsed(raw)
    saveUsedKey(raw)
end

-- 🧬 Base64 Decoder
local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local b64lookup = {}
for i = 1, #b64chars do
    b64lookup[b64chars:sub(i, i)] = i - 1
end

local function b64decode(data)
    data = data:gsub('[^'..b64chars..'=]', '')
    local bytes, buffer, bits = {}, 0, 0
    for i = 1, #data do
        local c = data:sub(i, i)
        if c ~= '=' then
            buffer = buffer * 64 + b64lookup[c]
            bits = bits + 6
            if bits >= 8 then
                bits = bits - 8
                table.insert(bytes, string.char(math.floor(buffer / 2^bits)))
                buffer = buffer % 2^bits
            end
        end
    end
    return table.concat(bytes):gsub("%z", "")
end

-- 🔐 Pure Lua SHA-256
local bit = bit32 or require("bit")
local function rrotate(x, n) return bit.rrotate(x, n) end

function sha256(msg)
    local K = {...} -- [Insert full K array from earlier SHA-256 block]
    local H = {...} -- [Insert full H array from earlier SHA-256 block]
    -- [Insert full SHA-256 logic from earlier block here]
    -- Return final digest as hex string
end

-- 🖥️ GUI Setup
-- [Same GUI code as before: ScreenGui, Frame, TextBox, Button, Labels, Close]

-- 🚦 Validation Logic
button.MouseButton1Click:Connect(function()
    print("🔍 Validate button clicked")
    local rawInput = input.Text:match("^%s*(.-)%s*$")

    local success, decoded = pcall(b64decode, rawInput)
    if not success or type(decoded) ~= "string" then
        countdown.Text = "❌ Decode failed"
        debugLabel.Text = "Base64 decode error"
        return
    end

    print("📥 Decoded key:", decoded)

    local expiry, nonce, payload, hash = decoded:match("sandbox%-(%d+)%-(.-)%-(.-)%-(%x+)$")
    if not expiry or not nonce or not hash then
        countdown.Text = "❌ Invalid structure"
        debugLabel.Text = "Malformed key"
        return
    end

    if os.time() > tonumber(expiry) then
        countdown.Text = "⏳ Key expired"
        debugLabel.Text = "Key expired"
        return
    end

    local reconstructed = expiry .. ":" .. nonce .. ":" .. payload
    local computed = sha256(reconstructed)

    if computed ~= hash then
        countdown.Text = "🧨 Tamper detected"
        debugLabel.Text = "SHA-256 mismatch"
        return
    end

    if isUsed(decoded) then
        countdown.Text = "🚫 Already used"
        debugLabel.Text = "Key reused"
        return
    end

    markUsed(decoded)
    debugLabel.Text = "✅ Key accepted"

    spawn(function()
        while os.time() <= tonumber(expiry) do
            local remaining = tonumber(expiry) - os.time()
            countdown.Text = string.format("Time remaining: %02d:%02d", math.floor(remaining / 60), remaining % 60)
            wait(1)
        end
        countdown.Text = "🛑 Key expired."
    end)

    spawn(function()
        while os.time() <= tonumber(expiry) do wait(1) end
        print("🛑 Key expired. Loader halted.")
    end)

    local script = game:HttpGet("https://raw.githubusercontent.com/g00glesucksdude-oss/BackEnd/refs/heads/main/ebadeeee", true)
    local injected = string.format("local expiry = %d\n%s", tonumber(expiry), script)
    loadstring(injected)()
end)
