-- Load SHA-256 module from GitHub
local sha256 = loadstring(game:HttpGet("https://raw.githubusercontent.com/g00glesucksdude-oss/Key-system-base/refs/heads/main/sha256"))()

-- Config
local salt = "sneaky_salt"
local expiry_ts = 1699999999  -- Replace with actual expiry timestamp
local expected_hash = sha256.hash("banana42:" .. salt .. ":" .. expiry_ts)
local nonce_file = "nonces.db"
local expiry_tolerance = 60

-- Nonce utilities
local function load_nonces()
	local f = io.open(nonce_file, "r")
	if not f then return {} end
	local raw = f:read("*a")
	f:close()
	local ok, data = pcall(function() return load("return " .. raw)() end)
	return ok and data or {}
end

local function save_nonces(tbl)
	local f = io.open(nonce_file, "w")
	f:write("return " .. tostring(tbl):gsub("%s+", " "))
	f:close()
end

-- Validator
local function validate_key(user_key)
	local now = os.time()
	if now > (expiry_ts + expiry_tolerance) then
		return false, "Key expired"
	end

	local nonces = load_nonces()
	if nonces[user_key] then
		return false, "Replay detected"
	end

	local combo = user_key .. ":" .. salt .. ":" .. tostring(expiry_ts)
	local hashed = sha256.hash(combo)
	if hashed ~= expected_hash then
		return false, "Invalid key"
	end

	nonces[user_key] = now
	save_nonces(nonces)
	return true, "Key valid"
end
